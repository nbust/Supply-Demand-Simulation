/**
 * @author Noah Buster, Justin Dial, Olivia Sayuk
 * Date: 2024 Sep 6
 * Description: ProducerCurve has array of Points
 * as well as methods to manage and manipulate Point array.
 */
public class ProducerCurve {
	
	private Point[] pCurve;
	
	/**
	 * constructor method instantiates pCurve array with number of points
	 * @param n
	 */
	private ProducerCurve(int n) {
		if (n < 0) {
			n = 0;
		}
		pCurve = new Point[n];
	}
	
	/**
	 * constructor instantiates pCurve array with number of linear points
	 * @param n
	 * @param slope
	 * @param startQuantity
	 * @param startPrice
	 */
	public ProducerCurve(int n, double slope, int startQuantity, double startPrice) {
		this(n);
		
		// fill array with n amount of points with linear function.
		for (int i = 0; i < pCurve.length; i++) {
			pCurve[i] = new Point(startQuantity + i, startPrice + (i*slope));
		}
	}
	
	/**
	 * @return formatted list of points as string
	 */
	public String toString() {

		// returns the Point objects in the array as formatted string
		StringBuilder sb = new StringBuilder("ProducerCurve: [");
    		for (int i = 0; i < pCurve.length; i++) {
        		if (pCurve[i] != null) {
            			sb.append(pCurve[i].toString());
        		}
        		if (i < pCurve.length - 1) {
            			sb.append(", ");
        		}
    		}
    		sb.append("]");
   		return sb.toString();
	}
	
	/**
	 * adds point p to end of pCurve array
	 * @param p
	 * @return whether operation succeeded
	 */
	boolean add(Point p) {
		
		// declare & instantiate new point array one larger than current pCurve
		// fill new array, except for last element, with points from pCurve
		Point[] result = new Point[pCurve.length + 1];
		for (int i = 0; i < pCurve.length; i++) {
			result[i] = pCurve[i];
		}
		
		// fill last element with point p, return true
		result[result.length - 1] = p;
		pCurve = result;
		return true;
	}
	
	/**
	 * removes point p from pCurve array
	 * @param p
	 * @return whether operation succeeded
	 */
	boolean remove(Point p) {
		int index = searchIndex(p);
		if (index == -1) {
			return false;
		}
		
		// declare & instantiate new point array one smaller pCurve
		// fill new array with points from pCurve, except for element at index
		Point[] result = new Point[pCurve.length - 1];
		for (int i = 0; i < pCurve.length; i++) {

			// if before removed point, add elements as is
			if (i < index) {
				result[i] = pCurve[i];
			}
			
			// if after removed point, add elements with offset 
			// to shift rest of list back by one
			else if (i > index) {
				result[i-1] = pCurve[i];
			}
		}
		
		// set pCurve to result, return true
		pCurve = result;
		return true;
	}
	
	/**
	 * finds if point is in pCurve array
	 * @param p
	 * @return whether given point is on curve
	 */
	boolean isOnCurve(Point p) {
		for (int i = 0; i < pCurve.length; i++) {
			if (pCurve[i].equals(p)) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * searches list for a given point
	 * @param p
	 * @return index of point p in pCurve array
	 */
	private int searchIndex(Point p) {
		int index = -1;
		for (int i = 0; i < pCurve.length; i++) {
			if (pCurve[i].equals(p)) {
				index = i;
			}
		}
		return index;
	}
}